import nextId from 'react-id-generator';
import React, { useEffect, useState } from 'react';
import { Tab } from './Tab';
import {
  StyledLi,
  StyledTabHeaderContainer,
  StyledTabsContainer,
  StyledUl,
} from './TabStyle';

export type TabModel = {
  /** Id of the tab, a random id will nbe assigned if empty */
  id?: string;
  /** Content of the type header */
  content: React.ReactNode;
};

export type TabsProps = {
  /** TabModel has 2 properties
   *
   * `id?: string`, id for Tab and will be autogenerated if empty
   *
   * `content: React.ReactNode` component for Tab header
   * */
  tabs: TabModel[];
  selected?: number;
  children?: React.ReactNode;
  fitted?: boolean;
  onSelected?: (index: number) => void;
};

export const Tabs = React.forwardRef<HTMLDivElement, TabsProps>(function Tabs(
  {
    tabs,
    selected: selectedIndex = 0,
    children,
    fitted,
    onSelected,
  }: TabsProps,
  ref
) {
  const tabLength = tabs.length;

  const [selectedTabIndex, setSelectedTabIndex] = useState(0);

  useEffect(() => {
    if (selectedIndex < 0 || selectedIndex >= tabLength) {
      return;
    }

    setSelectedTabIndex(selectedIndex);
  }, [selectedIndex, tabLength]);

  const handleSelectedIndexChanged = (index: number) => {
    setSelectedTabIndex(index);
    onSelected?.(index);
  };

  const renderTabs = tabs.map((tab: TabModel, index: number) => {
    const tabId = tab.id || nextId();
    return (
      <StyledLi key={`${tabId}-${index}`}>
        <Tab
          id={tabId}
          key={`tab-${tabId}-${index}`}
          content={tab.content}
          onSelect={() => handleSelectedIndexChanged(index)}
          selected={index === selectedTabIndex}
        ></Tab>
      </StyledLi>
    );
  });

  return (
    <StyledTabsContainer ref={ref}>
      <StyledTabHeaderContainer>
        <StyledUl data-fitted={fitted}>{renderTabs} </StyledUl>
      </StyledTabHeaderContainer>
      <div>{children}</div>
    </StyledTabsContainer>
  );
});
